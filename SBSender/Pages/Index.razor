@page "/"
@using SBShared.Const;
@using SBShared.DTOs;
@using SBShared.Models
@using SBSender.Services
@inject IQueueService queue

<h1>Hello, world!</h1>

Welcome to your new app.

<EditForm Model="@person">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="PersonId">Id</label>
        <InputNumber id="PersonId" class="form-control" @bind-Value="person.Id" />
        <button @onclick="()=> DeletePerson(person)" class="btn btn-danger">Delete</button>
    </div>
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" class="form-control" @bind-Value="person.Name" />
        <button @onclick="()=> UpdatePersonName(person)" class="btn btn-primary"> Update Name</button>
    </div>
    <div class="form-group">
        <label for="Age">Age</label>
        <InputNumber id="lastName" class="form-control" @bind-Value="person.Age" />
        <button @onclick="()=> UpdatePersonAge(person)" class="btn btn-primary"> Update Age</button>
    </div>
    <button @onclick="()=> AddPerson(person)" class="btn btn-primary">Add Person</button>
    <br />
    <button @onclick="()=> PrintPersonsList()" class="btn btn-success">Print Persons List</button>
</EditForm>

@code{
    private Person person = new Person();

    // private async Task PublishMessage()
    // {
    //     await queue.SendMessageAsync(person, "personqueue");
    //     person = new Person();
    // }
    private async Task UpdatePersonName(Person person)
    {
        UpdateNameMessageDTO updateName = new UpdateNameMessageDTO()
            {
                PersonId = person.Id,
                NewName = person.Name
            };
        await queue.SendMessageAsync(updateName, "personqueue", Status.UpdatePersonName);
        person = new Person();
    }

    private async Task AddPerson(Person person)
    {
        AddPersonMessageDTO addPerson = new AddPersonMessageDTO()
            {
                PersonId = person.Id,
                Name = person.Name,
                Age = person.Age
            };
        await queue.SendMessageAsync(addPerson, "personqueue", Status.AddPerson);
        person = new Person();
    }

    private async Task DeletePerson(Person person)
    {
        DeletePersonMessageDTO deletePerson = new DeletePersonMessageDTO()
            {
                PersonId = person.Id
            };
        await queue.SendMessageAsync(deletePerson, "personqueue", Status.DeletePerson);
        person = new Person();
    }

    private async Task UpdatePersonAge(Person person)
    {
        UpdateAgeMessageDTO updateAge = new UpdateAgeMessageDTO()
            {
                PersonId = person.Id,
                NewAge = person.Age
            };
        await queue.SendMessageAsync(updateAge, "personqueue", Status.UpdatePersonAge);
        person = new Person();
    }

    private async Task PrintPersonsList()
    {
        PrintPersonsListMessageDTO printPersonsList = new PrintPersonsListMessageDTO(){};
        await queue.SendMessageAsync(printPersonsList, "personqueue",Status.PrintPersonsList);
        person = new Person();
    }
}
